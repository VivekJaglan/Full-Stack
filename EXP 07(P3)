
Step 1: Create the Backend (Node.js + Socket.io)
1Ô∏è‚É£ Setup backend
mkdir backend
cd backend
npm init -y
npm install express socket.io cors

2Ô∏è‚É£ Create server.js
// backend/server.js
const express = require("express");
const http = require("http");
const cors = require("cors");
const { Server } = require("socket.io");

const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000", // React app URL
    methods: ["GET", "POST"],
  },
});

// Handle connections
io.on("connection", (socket) => {
  console.log("üü¢ User connected:", socket.id);

  // Listen for chat messages
  socket.on("send_message", (data) => {
    console.log("üì® Message received:", data);
    io.emit("receive_message", data); // broadcast to all clients
  });

  // Handle disconnect
  socket.on("disconnect", () => {
    console.log("üî¥ User disconnected:", socket.id);
  });
});

const PORT = 5000;
server.listen(PORT, () => console.log(`‚úÖ Server running on port ${PORT}`));


‚úÖ Run the server:

node server.js

‚öõÔ∏è Step 2: Create the React Frontend
1Ô∏è‚É£ Setup frontend

Open a new terminal:

npx create-react-app frontend
cd frontend
npm install socket.io-client

2Ô∏è‚É£ Create src/Chat.js
// frontend/src/Chat.js
import React, { useState, useEffect } from "react";
import io from "socket.io-client";

const socket = io("http://localhost:5000"); // connect to backend server

const Chat = () => {
  const [username, setUsername] = useState("");
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);

  // Receive messages from server
  useEffect(() => {
    socket.on("receive_message", (data) => {
      setMessages((prev) => [...prev, data]);
    });

    return () => {
      socket.off("receive_message");
    };
  }, []);

  // Send message to server
  const sendMessage = (e) => {
    e.preventDefault();
    if (username && message) {
      const msgData = {
        username,
        message,
        time: new Date().toLocaleTimeString(),
      };
      socket.emit("send_message", msgData);
      setMessage("");
    }
  };

  return (
    <div style={{ width: "400px", margin: "50px auto", textAlign: "center" }}>
      <h2>üí¨ Real-Time Chat</h2>

      {!username ? (
        <div>
          <input
            type="text"
            placeholder="Enter your name..."
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <button onClick={() => username && setUsername(username)}>Join Chat</button>
        </div>
      ) : (
        <>
          <div
            style={{
              border: "1px solid #ccc",
              borderRadius: "10px",
              height: "300px",
              overflowY: "auto",
              padding: "10px",
              textAlign: "left",
              marginBottom: "10px",
            }}
          >
            {messages.map((msg, i) => (
              <div key={i} style={{ marginBottom: "10px" }}>
                <strong>{msg.username}</strong> <em>({msg.time})</em>: {msg.message}
              </div>
            ))}
          </div>

          <form onSubmit={sendMessage}>
            <input
              type="text"
              placeholder="Type a message..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              style={{ width: "70%", padding: "5px" }}
            />
            <button type="submit" style={{ padding: "5px 10px" }}>
              Send
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chat;

3Ô∏è‚É£ Modify src/App.js
// frontend/src/App.js
import React from "react";
import Chat from "./Chat";

function App() {
  return (
    <div className="App">
      <Chat />
    </div>
  );
}

export default App;

üß† Step 3: Run and Test the App
Run backend
cd backend
node server.js

Run frontend
cd frontend
npm start
