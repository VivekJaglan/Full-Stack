

## Folder Layout

```
blog-platform/
├── backend/
│   ├── package.json
│   ├── .env.example
│   ├── server.js
│   ├── config/db.js
│   ├── models/
│   │   ├── User.js
│   │   ├── Post.js
│   │   └── Comment.js
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── userController.js
│   │   ├── postController.js
│   │   └── commentController.js
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── userRoutes.js
│   │   ├── postRoutes.js
│   │   └── commentRoutes.js
│   └── middleware/
│       └── authMiddleware.js
└── frontend/
    ├── package.json
    ├── public/index.html
    └── src/
        ├── index.js
        ├── App.jsx
        ├── api.js
        ├── auth.js
        ├── styles.css
        └── components/
            ├── AuthForm.jsx
            ├── Profile.jsx
            ├── CreatePost.jsx
            ├── PostList.jsx
            ├── PostView.jsx
            ├── CommentList.jsx
            └── ProtectedRoute.jsx
```

---

> **Important:** This scaffold favors clarity and learning over production hardening. For production, add input validation, rate limiting, HTTPS, refresh tokens, stronger password policies, and sanitize user input.

---

## Backend

### backend/package.json

```json
{
  "name": "blog-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.0",
    "socket.io": "^4.7.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}
```

### backend/.env.example

```
PORT=5000
MONGO_URI=mongodb://localhost:27017/blog_platform
JWT_SECRET=replace_with_a_strong
```
