Step 1: Initialize the Project

Run these commands:

mkdir account-transfer-api
cd account-transfer-api
npm init -y
npm install express mongoose body-parser

üß† Step 2: Create server.js
// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// ------------------------------------------
// MongoDB Connection
// ------------------------------------------
mongoose
  .connect('mongodb://127.0.0.1:27017/bankDB')
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

// ------------------------------------------
// Account Schema & Model
// ------------------------------------------
const accountSchema = new mongoose.Schema({
  name: String,
  balance: Number
});

const Account = mongoose.model('Account', accountSchema);

// ------------------------------------------
// API: Create Account (for testing)
// ------------------------------------------
app.post('/create', async (req, res) => {
  try {
    const { name, balance } = req.body;
    const existing = await Account.findOne({ name });
    if (existing) return res.status(400).json({ error: 'Account already exists' });

    const newAcc = new Account({ name, balance });
    await newAcc.save();
    res.json({ message: 'Account created successfully', account: newAcc });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ------------------------------------------
// API: View All Accounts (for testing)
// ------------------------------------------
app.get('/accounts', async (req, res) => {
  const accounts = await Account.find();
  res.json(accounts);
});

// ------------------------------------------
// API: Transfer Money
// ------------------------------------------
app.post('/transfer', async (req, res) => {
  const { from, to, amount } = req.body;

  if (!from || !to || !amount || amount <= 0)
    return res.status(400).json({ error: 'Invalid input data' });

  try {
    // Step 1: Find both accounts
    const sender = await Account.findOne({ name: from });
    const receiver = await Account.findOne({ name: to });

    if (!sender) return res.status(404).json({ error: 'Sender account not found' });
    if (!receiver) return res.status(404).json({ error: 'Receiver account not found' });

    // Step 2: Check balance
    if (sender.balance < amount)
      return res.status(400).json({ error: 'Insufficient balance in sender account' });

    // Step 3: Deduct and add (sequential updates)
    sender.balance -= amount;
    receiver.balance += amount;

    await sender.save();
    await receiver.save();

    res.json({
      message: `Transfer successful: ‚Çπ${amount} from ${from} to ${to}`,
      senderBalance: sender.balance,
      receiverBalance: receiver.balance
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ------------------------------------------
// Start Server
// ------------------------------------------
const PORT = 3000;
app.listen(PORT, () => console.log(`üöÄ Server running on http://localhost:${PORT}`));

üöÄ Step 3: Run the Server
node server.js

üß™ Step 4: Test Using Postman or curl
1Ô∏è‚É£ Create Sample Accounts
curl -X POST http://localhost:3000/create \
-H "Content-Type: application/json" \
-d '{"name": "Aman", "balance": 1000}'

curl -X POST http://localhost:3000/create \
-H "Content-Type: application/json" \
-d '{"name": "Vivek", "balance": 500}'

2Ô∏è‚É£ Check All Accounts
curl http://localhost:3000/accounts


Response Example

[
  { "_id": "1", "name": "Aman", "balance": 1000 },
  { "_id": "2", "name": "Vivek", "balance": 500 }
]

3Ô∏è‚É£ Successful Transfer
curl -X POST http://localhost:3000/transfer \
-H "Content-Type: application/json" \
-d '{"from": "Aman", "to": "Vivek", "amount": 300}'


Response

{
  "message": "Transfer successful: ‚Çπ300 from Aman to Vivek",
  "senderBalance": 700,
  "receiverBalance": 800
}
